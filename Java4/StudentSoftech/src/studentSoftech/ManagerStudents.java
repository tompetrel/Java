/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentSoftech;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author TAI
 */
class student {

    String studentID;
    String studentName;
    boolean sex;
    String classID;

    public student() {
    }

    public student(String studentID, String studentName, boolean sex, String classID) {
        this.studentID = studentID;
        this.studentName = studentName;
        this.sex = sex;
        this.classID = classID;
    }

    public String getStudentID() {
        return studentID;
    }

    public void setStudentID(String studentID) {
        this.studentID = studentID;
    }

    public String getStudentName() {
        return studentName;
    }

    public void setStudentName(String studentName) {
        this.studentName = studentName;
    }

    public boolean isSex() {
        return sex;
    }

    public void setSex(boolean sex) {
        this.sex = sex;
    }

    public String getClassID() {
        return classID;
    }

    public void setClassID(String classID) {
        this.classID = classID;
    }

    @Override
    public String toString() {
        return "student{" + "studentID=" + studentID + ", studentName=" + studentName + ", sex=" + sex + ", classID=" + classID + '}';
    }

}

public final class ManagerStudents extends javax.swing.JFrame {

    /**
     * Creates new form ManagerStudents
     */
    static ArrayList<student> arrListStudent;
    static ArrayList<String> arrListClassID;
    static int currentElement = 0;

    void initArrayListStudent() throws ClassNotFoundException, SQLException {
        arrListStudent = new ArrayList<>();
        Connection conn;
        Statement stmt;
        ResultSet rs;

        conn = studentSoftech.connectionSQL.connectSQLSever();
        stmt = conn.createStatement();
        String sql = "select studentID,studentname,sex,classID from student order by studentID";
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            arrListStudent.add(new student(rs.getString("studentID"), rs.getString("studentname"), rs.getBoolean("sex"), rs.getString("classID")));
        }
        stmt.close();
        conn.close();
    }

    void initArrayListClassID() throws ClassNotFoundException, SQLException {
        arrListClassID = new ArrayList<>();
        Connection conn;
        Statement stmt;
        ResultSet rs;

        conn = studentSoftech.connectionSQL.connectSQLSever();
        stmt = conn.createStatement();
        String sql = "select classID from class order by classID";
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            arrListClassID.add(rs.getString("classID"));
        }
        stmt.close();
        conn.close();
    }

    void initGUI() {
        setLocationRelativeTo(null);
        setResizable(false);
        btnUpdate.setEnabled(true);
        btnInsert.setEnabled(true);
        btnDelete.setEnabled(true);
        txtID.setEditable(false);
        txtName.setEditable(false);
        radioMale.setEnabled(false);
        radioFemale.setEnabled(false);
        cmbClass.setEnabled(false);
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext.setEnabled(true);
        btnLast.setEnabled(true);
        txtID.setText(arrListStudent.get(0).getStudentID());
        txtName.setText(arrListStudent.get(0).getStudentName());
        if (arrListStudent.get(0).isSex()) {
            radioMale.setSelected(true);
            radioFemale.setSelected(false);
        } else {
            radioMale.setSelected(false);
            radioFemale.setSelected(true);
        }
        cmbClass.removeAllItems();
        cmbClass.addItem(arrListStudent.get(0).getClassID());
        currentElement = 0;
        txtCount.setText((currentElement + 1) + " / " + arrListStudent.size());
    }

    public ManagerStudents() throws ClassNotFoundException, SQLException {
        initComponents();
        initArrayListStudent();
        initArrayListClassID();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupSex = new javax.swing.ButtonGroup();
        btnDelete = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cmbClass = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        radioMale = new javax.swing.JRadioButton();
        radioFemale = new javax.swing.JRadioButton();
        txtCount = new javax.swing.JTextField();
        btnLast = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel1.setText("ID");

        jLabel2.setText("Name");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Class");

        jLabel4.setText("Sex");

        btnGroupSex.add(radioMale);
        radioMale.setText("Male");

        btnGroupSex.add(radioFemale);
        radioFemale.setText("Female");

        txtCount.setEditable(false);

        btnLast.setText("Last");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtID)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(radioMale)
                        .addGap(18, 18, 18)
                        .addComponent(radioFemale)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(cmbClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFirst)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(btnLast)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(radioMale)
                    .addComponent(radioFemale))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLast)
                    .addComponent(btnPrevious)
                    .addComponent(btnNext)
                    .addComponent(btnFirst))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        txtID.setText(arrListStudent.get(0).getStudentID());
        txtName.setText(arrListStudent.get(0).getStudentName());
        if (arrListStudent.get(0).isSex()) {
            radioMale.setSelected(true);
            radioFemale.setSelected(false);
        } else {
            radioMale.setSelected(false);
            radioFemale.setSelected(true);
        }
        cmbClass.removeAllItems();
        cmbClass.addItem(arrListStudent.get(0).getClassID());
        currentElement = 0;
        txtCount.setText((currentElement + 1) + " / " + arrListStudent.size());
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext.setEnabled(true);
        btnLast.setEnabled(true);
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        currentElement++;
        txtID.setText(arrListStudent.get(currentElement).getStudentID());
        txtName.setText(arrListStudent.get(currentElement).getStudentName());
        if (arrListStudent.get(currentElement).isSex()) {
            radioMale.setSelected(true);
            radioFemale.setSelected(false);
        } else {
            radioMale.setSelected(false);
            radioFemale.setSelected(true);
        }
        cmbClass.removeAllItems();
        cmbClass.addItem(arrListStudent.get(currentElement).getClassID());
        txtCount.setText((currentElement + 1) + " / " + arrListStudent.size());
        if (currentElement + 1 < arrListStudent.size()) {
            btnFirst.setEnabled(true);
            btnPrevious.setEnabled(true);
            btnNext.setEnabled(true);
            btnLast.setEnabled(true);
        } else {
            btnFirst.setEnabled(true);
            btnPrevious.setEnabled(true);
            btnNext.setEnabled(false);
            btnLast.setEnabled(false);
        }

    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        currentElement--;
        txtID.setText(arrListStudent.get(currentElement).getStudentID());
        txtName.setText(arrListStudent.get(currentElement).getStudentName());
        if (arrListStudent.get(currentElement).isSex()) {
            radioMale.setSelected(true);
            radioFemale.setSelected(false);
        } else {
            radioMale.setSelected(false);
            radioFemale.setSelected(true);
        }
        cmbClass.removeAllItems();
        cmbClass.addItem(arrListStudent.get(currentElement).getClassID());
        txtCount.setText((currentElement + 1) + " / " + arrListStudent.size());
        if (currentElement > 0) {
            btnFirst.setEnabled(true);
            btnPrevious.setEnabled(true);
            btnNext.setEnabled(true);
            btnLast.setEnabled(true);
        } else {
            btnFirst.setEnabled(false);
            btnPrevious.setEnabled(false);
            btnNext.setEnabled(true);
            btnLast.setEnabled(true);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        currentElement = arrListStudent.size() - 1;
        txtID.setText(arrListStudent.get(currentElement).getStudentID());
        txtName.setText(arrListStudent.get(currentElement).getStudentName());
        if (arrListStudent.get(currentElement).isSex()) {
            radioMale.setSelected(true);
            radioFemale.setSelected(false);
        } else {
            radioMale.setSelected(false);
            radioFemale.setSelected(true);
        }
        cmbClass.removeAllItems();
        cmbClass.addItem(arrListStudent.get(currentElement).getClassID());
        txtCount.setText((currentElement + 1) + " / " + arrListStudent.size());

        btnFirst.setEnabled(true);
        btnPrevious.setEnabled(true);
        btnNext.setEnabled(false);
        btnLast.setEnabled(false);

    }//GEN-LAST:event_btnLastActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (btnUpdate.getText().equalsIgnoreCase("Update")) {
            btnUpdate.setText("Save");
            btnInsert.setText("Cancel");
            btnDelete.setEnabled(false);
            txtName.setEditable(true);
            radioMale.setEnabled(true);
            radioFemale.setEnabled(true);
            cmbClass.removeAllItems();
            for (int i = 0; i < arrListClassID.size(); i++) {
                cmbClass.addItem(arrListClassID.get(i));
            }
            cmbClass.setEnabled(true);
            btnFirst.setEnabled(false);
            btnNext.setEnabled(false);
            btnPrevious.setEnabled(false);
            btnLast.setEnabled(false);
            txtCount.setText("");
            return;
        }
        if (btnUpdate.getText().equalsIgnoreCase("Save")) {
            if (txtName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input student name!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtName.requestFocus();
                return;
            }
            if (txtName.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Student name is only 50 characters!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtName.requestFocus();
                return;
            }
            try {
                Connection conn = studentSoftech.connectionSQL.connectSQLSever();
                String sql = "update student set studentname = ?,sex = ?,classID = ? where studentID like ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, txtName.getText());
                if (radioMale.isSelected()) {
                    pstmt.setBoolean(2, true);
                } else {
                    pstmt.setBoolean(2, false);
                }
                pstmt.setString(3, cmbClass.getSelectedItem().toString());
                pstmt.setString(4, txtID.getText());

                pstmt.executeUpdate();
                pstmt.close();
                conn.close();
                initArrayListStudent();
                initGUI();
                JOptionPane.showMessageDialog(null, "Update new student successful!", "Information", JOptionPane.INFORMATION_MESSAGE);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        btnUpdate.setText("Update");
        btnInsert.setText("Insert");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        if (btnInsert.getText().equalsIgnoreCase("Cancel")) {
            btnUpdate.setText("Update");
            btnInsert.setText("Insert");
            try {
                initArrayListStudent();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            }
            initGUI();
            return;
        }
        if (btnInsert.getText().equalsIgnoreCase("Insert")) {
            btnUpdate.setEnabled(false);
            btnInsert.setText("Save");
            btnDelete.setText("Cancel");

            txtID.setEditable(true);
            txtID.setText("");
            txtID.requestFocus();
            txtName.setEditable(true);
            txtName.setText("");
            btnGroupSex.clearSelection();
            radioMale.setEnabled(true);
            radioFemale.setEnabled(true);
            cmbClass.removeAllItems();
            for (int i = 0; i < arrListClassID.size(); i++) {
                cmbClass.addItem(arrListClassID.get(i));
            }
            cmbClass.setEnabled(true);
            btnFirst.setEnabled(false);
            btnNext.setEnabled(false);
            btnPrevious.setEnabled(false);
            btnLast.setEnabled(false);
            txtCount.setText("");
            return;
        }
        if (btnInsert.getText().equalsIgnoreCase("Save")) {
            if (txtID.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input student ID!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtID.requestFocus();
                return;
            }
            if (txtID.getText().length() > 10) {
                JOptionPane.showMessageDialog(null, "Student ID is only 10 characters!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtID.requestFocus();
                return;
            }
            if (txtName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input student name!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtName.requestFocus();
                return;
            }
            if (txtName.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "Student name is only 50 characters!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtName.requestFocus();
                return;
            }
            if ((!radioMale.isSelected()) && (!radioFemale.isSelected())) {
                JOptionPane.showMessageDialog(null, "Please select sex of student!", "Error", JOptionPane.INFORMATION_MESSAGE);
                txtName.requestFocus();
                return;
            }
            try {
                Connection conn = studentSoftech.connectionSQL.connectSQLSever();
                String sql = "select studentID from student where studentID like ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, txtID.getText());
                ResultSet rs = pstmt.executeQuery();
                int countRow = 0;
                while (rs.next()) {
                    countRow++;
                }
                conn.close();
                if (countRow > 0) {
                    JOptionPane.showMessageDialog(null, "Student ID " + txtID.getText() + " already exists. Can not update!", "Error", JOptionPane.INFORMATION_MESSAGE);
                    txtID.requestFocus();
                    return;
                } else {
                    conn = studentSoftech.connectionSQL.connectSQLSever();
                    sql = "insert into student values (?,?,?,?)";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, txtID.getText());
                    pstmt.setString(2, txtName.getText());
                    if (radioMale.isSelected()) {
                        pstmt.setBoolean(3, true);
                    } else {
                        pstmt.setBoolean(3, false);
                    }
                    pstmt.setString(4, cmbClass.getSelectedItem().toString());
                    pstmt.executeUpdate();
                    pstmt.close();
                    conn.close();
                    initArrayListStudent();
                    initGUI();
                    JOptionPane.showMessageDialog(null, "Insert new student successful!", "Information", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            }
            btnInsert.setText("Insert");
            btnDelete.setText("Delete");
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (btnDelete.getText().equalsIgnoreCase("Cancel")) {
            btnInsert.setText("Insert");
            btnDelete.setText("Delete");
            try {
                initArrayListStudent();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
            }
            initGUI();
            return;
        }
        if (btnDelete.getText().equalsIgnoreCase("Delete")) {
            String str = "Are you sure you want to delete student whose student id is '"
                    + txtID.getText() + "', name is '"
                    + txtName.getText() + "'";
            if (radioMale.isSelected()) {
                str = str + ", sex is 'Male'";
            }
            if (radioFemale.isSelected()) {
                str = str + ", sex is 'Female'";
            }
            str = str + ", classID is '" + cmbClass.getSelectedItem() + "'";
            int i = JOptionPane.showConfirmDialog(null, str, "Comfirm Dialog", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (i == 0) {
                try {
                    Connection conn = studentSoftech.connectionSQL.connectSQLSever();
                    String sql = "delete from student where studentID like ?";
                    PreparedStatement pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, txtID.getText());
                    pstmt.executeUpdate();
                    pstmt.close();
                    conn.close();
                    
                    initArrayListStudent();
                    initGUI();
                    JOptionPane.showMessageDialog(null, "Delete an student successful!", "Information", JOptionPane.INFORMATION_MESSAGE);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ManagerStudents().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManagerStudents.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.ButtonGroup btnGroupSex;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton radioFemale;
    private javax.swing.JRadioButton radioMale;
    private javax.swing.JTextField txtCount;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
